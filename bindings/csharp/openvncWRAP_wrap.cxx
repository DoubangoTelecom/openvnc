/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OpenVNCWRAP(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OpenVNCWRAP(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OpenVNCWRAP(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include <stdint.h>		// Use the C99 official header


#include "Debug.h"
#include "vncAPI.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "openvncWRAP_wrap.h"

SwigDirector_DebugCallback::SwigDirector_DebugCallback() : DebugCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_DebugCallback::~SwigDirector_DebugCallback() {
  
}


int SwigDirector_DebugCallback::OnDebugInfo(char const *message) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jmessage = 0 ;
  
  if (!swig_callbackOnDebugInfo) {
    return DebugCallback::OnDebugInfo(message);
  } else {
    jmessage = SWIG_csharp_string_callback((const char *)message); 
    jresult = (int) swig_callbackOnDebugInfo(jmessage);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_DebugCallback::OnDebugWarn(char const *message) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jmessage = 0 ;
  
  if (!swig_callbackOnDebugWarn) {
    return DebugCallback::OnDebugWarn(message);
  } else {
    jmessage = SWIG_csharp_string_callback((const char *)message); 
    jresult = (int) swig_callbackOnDebugWarn(jmessage);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_DebugCallback::OnDebugError(char const *message) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jmessage = 0 ;
  
  if (!swig_callbackOnDebugError) {
    return DebugCallback::OnDebugError(message);
  } else {
    jmessage = SWIG_csharp_string_callback((const char *)message); 
    jresult = (int) swig_callbackOnDebugError(jmessage);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_DebugCallback::OnDebugFatal(char const *message) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jmessage = 0 ;
  
  if (!swig_callbackOnDebugFatal) {
    return DebugCallback::OnDebugFatal(message);
  } else {
    jmessage = SWIG_csharp_string_callback((const char *)message); 
    jresult = (int) swig_callbackOnDebugFatal(jmessage);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_DebugCallback::swig_connect_director(SWIG_Callback0_t callbackOnDebugInfo, SWIG_Callback1_t callbackOnDebugWarn, SWIG_Callback2_t callbackOnDebugError, SWIG_Callback3_t callbackOnDebugFatal) {
  swig_callbackOnDebugInfo = callbackOnDebugInfo;
  swig_callbackOnDebugWarn = callbackOnDebugWarn;
  swig_callbackOnDebugError = callbackOnDebugError;
  swig_callbackOnDebugFatal = callbackOnDebugFatal;
}

void SwigDirector_DebugCallback::swig_init_callbacks() {
  swig_callbackOnDebugInfo = 0;
  swig_callbackOnDebugWarn = 0;
  swig_callbackOnDebugError = 0;
  swig_callbackOnDebugFatal = 0;
}

SwigDirector_vncClientCallback::SwigDirector_vncClientCallback() : vncClientCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_vncClientCallback::~SwigDirector_vncClientCallback() {
  
}


vncError_t SwigDirector_vncClientCallback::OnEvent(vncClientEvent const *pcEvent) const {
  vncError_t c_result = SwigValueInit< vncError_t >() ;
  int jresult = 0 ;
  void * jpcEvent = 0 ;
  
  if (!swig_callbackOnEvent) {
    throw Swig::DirectorPureVirtualException("vncClientCallback::OnEvent");
  } else {
    jpcEvent = (void *) pcEvent; 
    jresult = (int) swig_callbackOnEvent(jpcEvent);
    c_result = (vncError_t)jresult; 
  }
  return c_result;
}

void SwigDirector_vncClientCallback::swig_connect_director(SWIG_Callback0_t callbackOnEvent) {
  swig_callbackOnEvent = callbackOnEvent;
}

void SwigDirector_vncClientCallback::swig_init_callbacks() {
  swig_callbackOnEvent = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugCallback() {
  void * jresult ;
  DebugCallback *result = 0 ;
  
  result = (DebugCallback *)new SwigDirector_DebugCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DebugCallback(void * jarg1) {
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  
  arg1 = (DebugCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugCallback_OnDebugInfo(void * jarg1, char * jarg2) {
  int jresult ;
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((DebugCallback const *)arg1)->OnDebugInfo((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugCallback_OnDebugInfoSwigExplicitDebugCallback(void * jarg1, char * jarg2) {
  int jresult ;
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((DebugCallback const *)arg1)->DebugCallback::OnDebugInfo((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugCallback_OnDebugWarn(void * jarg1, char * jarg2) {
  int jresult ;
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((DebugCallback const *)arg1)->OnDebugWarn((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugCallback_OnDebugWarnSwigExplicitDebugCallback(void * jarg1, char * jarg2) {
  int jresult ;
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((DebugCallback const *)arg1)->DebugCallback::OnDebugWarn((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugCallback_OnDebugError(void * jarg1, char * jarg2) {
  int jresult ;
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((DebugCallback const *)arg1)->OnDebugError((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugCallback_OnDebugErrorSwigExplicitDebugCallback(void * jarg1, char * jarg2) {
  int jresult ;
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((DebugCallback const *)arg1)->DebugCallback::OnDebugError((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugCallback_OnDebugFatal(void * jarg1, char * jarg2) {
  int jresult ;
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((DebugCallback const *)arg1)->OnDebugFatal((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugCallback_OnDebugFatalSwigExplicitDebugCallback(void * jarg1, char * jarg2) {
  int jresult ;
  DebugCallback *arg1 = (DebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((DebugCallback const *)arg1)->DebugCallback::OnDebugFatal((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugCallback_director_connect(void *objarg, SwigDirector_DebugCallback::SWIG_Callback0_t callback0, SwigDirector_DebugCallback::SWIG_Callback1_t callback1, SwigDirector_DebugCallback::SWIG_Callback2_t callback2, SwigDirector_DebugCallback::SWIG_Callback3_t callback3) {
  DebugCallback *obj = (DebugCallback *)objarg;
  SwigDirector_DebugCallback *director = dynamic_cast<SwigDirector_DebugCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NULL_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_HAVE_POLL_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_USE_POLL_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_HAVE_IFADDRS_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_HAVE_DNS_H_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_HAVE_SS_LEN_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_HAVE_SA_LEN_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_HAVE_GETTIMEOFDAY_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_CONFIG_SERVER_PORT_get() {
  int jresult ;
  int result;
  
  result = (int) 5900;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_CONFIG_CLIENT_PORT_get() {
  int jresult ;
  int result;
  
  result = (int) 5500;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_CONFIG_VERSION_MAJOR_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_CONFIG_VERSION_MINOR_get() {
  int jresult ;
  int result;
  
  result = (int) 8;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_CONFIG_VERSION_MAJOR_MIN_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_CONFIG_VERSION_MINOR_MIN_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_CONFIG_VERSION_MAJOR_MAX_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_CONFIG_VERSION_MINOR_MAX_get() {
  int jresult ;
  int result;
  
  result = (int) 8;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_NET_INVALID_SOCKET_get() {
  int jresult ;
  int result;
  
  result = (int) -1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_NET_INVALID_FD_get() {
  int jresult ;
  int result;
  
  result = (int) -1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_NET_SOCKET_HOST_ANY_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_NET_SOCKET_PORT_ANY_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_NET_CONNECT_TIMEOUT_get() {
  int jresult ;
  int result;
  
  result = (int) 2000;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_NET_MAX_FDS_get() {
  int jresult ;
  int result;
  
  result = (int) 64;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_NET_RCVBUF_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) (64*1024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_NET_SNDBUF_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) (64*1024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncObject(void * jarg1) {
  vncObject *arg1 = (vncObject *) 0 ;
  
  arg1 = (vncObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncClientObject__SWIG_0(void * jarg1) {
  void * jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncObjectWrapper< vncClient * > *result = 0 ;
  
  arg1 = (vncClient *)jarg1; 
  result = (vncObjectWrapper< vncClient * > *)new vncObjectWrapper< vncClient * >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncClientObject__SWIG_1() {
  void * jresult ;
  vncObjectWrapper< vncClient * > *result = 0 ;
  
  result = (vncObjectWrapper< vncClient * > *)new vncObjectWrapper< vncClient * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncClientObject__SWIG_2(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = 0 ;
  vncObjectWrapper< vncClient * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncClient * > const & type is null", 0);
    return 0;
  } 
  result = (vncObjectWrapper< vncClient * > *)new vncObjectWrapper< vncClient * >((vncObjectWrapper< vncClient * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncClientObject(void * jarg1) {
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject_opEquals__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncClient *arg2 = (vncClient *) (vncClient *)0 ;
  vncObjectWrapper< vncClient * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (vncClient *)jarg2; 
  {
    vncObjectWrapper< vncClient * > &_result_ref = (arg1)->operator =(arg2);
    result = (vncObjectWrapper< vncClient * > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject_opEquals__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncObjectWrapper< vncClient * > *arg2 = 0 ;
  vncObjectWrapper< vncClient * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (vncObjectWrapper< vncClient * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncClient * > const & type is null", 0);
    return 0;
  } 
  {
    vncObjectWrapper< vncClient * > &_result_ref = (arg1)->operator =((vncObjectWrapper< vncClient * > const &)*arg2);
    result = (vncObjectWrapper< vncClient * > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClientObject_opIsEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncObjectWrapper< vncClient * > arg2 ;
  vncObjectWrapper< vncClient * > const *argp2 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  argp2 = (vncObjectWrapper< vncClient * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vncObjectWrapper< vncClient * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((vncObjectWrapper< vncClient * > const *)arg1)->operator ==(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClientObject_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncObjectWrapper< vncClient * > *arg2 = 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (vncObjectWrapper< vncClient * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncClient * > const & type is null", 0);
    return 0;
  } 
  result = (bool)((vncObjectWrapper< vncClient * > const *)arg1)->operator !=((vncObjectWrapper< vncClient * > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClientObject_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncObjectWrapper< vncClient * > arg2 ;
  vncObjectWrapper< vncClient * > const *argp2 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  argp2 = (vncObjectWrapper< vncClient * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vncObjectWrapper< vncClient * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((vncObjectWrapper< vncClient * > const *)arg1)->operator <(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject___deref__(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncClient *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (vncClient *)((vncObjectWrapper< vncClient * > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject___ref__(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncClient *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (vncClient *)((vncObjectWrapper< vncClient * > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClientObject_opBool(void * jarg1) {
  unsigned int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (bool)((vncObjectWrapper< vncClient * > const *)arg1)->operator bool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_vncClientObject_GetObjectId(void * jarg1) {
  char * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  char *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (char *)(*arg1)->GetObjectId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClientObject_IsValid(void * jarg1) {
  unsigned int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (bool)(*arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_GetSate(void * jarg1) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncClientState_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (vncClientState_t)(*arg1)->GetSate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_SetPassword(void * jarg1, char * jarg2) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (vncError_t)(*arg1)->SetPassword((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_SetPixelSize(void * jarg1, int jarg2) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncRfbPixelSize_t arg2 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (vncRfbPixelSize_t)jarg2; 
  result = (vncError_t)(*arg1)->SetPixelSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_SetPixelFormat(void * jarg1, void * jarg2) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncRfbPixelFormat_t *arg2 = (vncRfbPixelFormat_t *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (vncRfbPixelFormat_t *)jarg2; 
  result = (vncError_t)(*arg1)->SetPixelFormat((vncRfbPixelFormat_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_Configure__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4, int jarg5) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncNetIPVersion_t arg5 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  arg5 = (vncNetIPVersion_t)jarg5; 
  result = (vncError_t)(*arg1)->Configure((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_Configure__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  result = (vncError_t)(*arg1)->Configure((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_Start(void * jarg1) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (vncError_t)(*arg1)->Start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_Connect(void * jarg1) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (vncError_t)(*arg1)->Connect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_Disconnect(void * jarg1) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (vncError_t)(*arg1)->Disconnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClientObject_IsConnected(void * jarg1) {
  unsigned int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (bool)(*arg1)->IsConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClientObject_IsSessionEstablished(void * jarg1) {
  unsigned int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (bool)(*arg1)->IsSessionEstablished();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_SetParentWindow__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  void *arg2 = (void *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = jarg2; 
  result = (vncError_t)(*arg1)->SetParentWindow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_SetParentWindow__SWIG_1(void * jarg1, long long jarg2) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  int64_t arg2 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (vncError_t)(*arg1)->SetParentWindow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_SetCallback(void * jarg1, void * jarg2) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncClientCallback *arg2 = (vncClientCallback *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (vncClientCallback *)jarg2; 
  result = (vncError_t)(*arg1)->SetCallback((vncClientCallback const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_SendPointerEvent(void * jarg1, unsigned char jarg2, unsigned short jarg3, unsigned short jarg4) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  uint8_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  result = (vncError_t)(*arg1)->SendPointerEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientObject_SendKeyEvent(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  bool arg2 ;
  uint32_t arg3 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (uint32_t)jarg3; 
  result = (vncError_t)(*arg1)->SendKeyEvent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject_New__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  result = (*arg1)->New((char const *)arg2,arg3,arg4);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject_New__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  result = (*arg1)->New((char const *)arg2,arg3);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject_New__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->New((char const *)arg2);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject_New__SWIG_3(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (*arg1)->New();
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClientObject_ABCD(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncClient * > *arg1 = (vncObjectWrapper< vncClient * > *) 0 ;
  vncClient *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncClient * > *)jarg1; 
  result = (vncClient *)(*arg1)->ABCD();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncServerObject__SWIG_0(void * jarg1) {
  void * jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  vncObjectWrapper< vncServer * > *result = 0 ;
  
  arg1 = (vncServer *)jarg1; 
  result = (vncObjectWrapper< vncServer * > *)new vncObjectWrapper< vncServer * >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncServerObject__SWIG_1() {
  void * jresult ;
  vncObjectWrapper< vncServer * > *result = 0 ;
  
  result = (vncObjectWrapper< vncServer * > *)new vncObjectWrapper< vncServer * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncServerObject__SWIG_2(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = 0 ;
  vncObjectWrapper< vncServer * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncServer * > const & type is null", 0);
    return 0;
  } 
  result = (vncObjectWrapper< vncServer * > *)new vncObjectWrapper< vncServer * >((vncObjectWrapper< vncServer * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncServerObject(void * jarg1) {
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServerObject_opEquals__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncServer *arg2 = (vncServer *) (vncServer *)0 ;
  vncObjectWrapper< vncServer * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (vncServer *)jarg2; 
  {
    vncObjectWrapper< vncServer * > &_result_ref = (arg1)->operator =(arg2);
    result = (vncObjectWrapper< vncServer * > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServerObject_opEquals__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncObjectWrapper< vncServer * > *arg2 = 0 ;
  vncObjectWrapper< vncServer * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (vncObjectWrapper< vncServer * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncServer * > const & type is null", 0);
    return 0;
  } 
  {
    vncObjectWrapper< vncServer * > &_result_ref = (arg1)->operator =((vncObjectWrapper< vncServer * > const &)*arg2);
    result = (vncObjectWrapper< vncServer * > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncServerObject_opIsEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncObjectWrapper< vncServer * > arg2 ;
  vncObjectWrapper< vncServer * > const *argp2 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  argp2 = (vncObjectWrapper< vncServer * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vncObjectWrapper< vncServer * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((vncObjectWrapper< vncServer * > const *)arg1)->operator ==(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncServerObject_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncObjectWrapper< vncServer * > *arg2 = 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (vncObjectWrapper< vncServer * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncServer * > const & type is null", 0);
    return 0;
  } 
  result = (bool)((vncObjectWrapper< vncServer * > const *)arg1)->operator !=((vncObjectWrapper< vncServer * > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncServerObject_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncObjectWrapper< vncServer * > arg2 ;
  vncObjectWrapper< vncServer * > const *argp2 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  argp2 = (vncObjectWrapper< vncServer * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vncObjectWrapper< vncServer * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((vncObjectWrapper< vncServer * > const *)arg1)->operator <(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServerObject___deref__(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncServer *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  result = (vncServer *)((vncObjectWrapper< vncServer * > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServerObject___ref__(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncServer *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  result = (vncServer *)((vncObjectWrapper< vncServer * > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncServerObject_opBool(void * jarg1) {
  unsigned int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  result = (bool)((vncObjectWrapper< vncServer * > const *)arg1)->operator bool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_vncServerObject_GetObjectId(void * jarg1) {
  char * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  char *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  result = (char *)(*arg1)->GetObjectId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncServerObject_IsValid(void * jarg1) {
  unsigned int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  result = (bool)(*arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServerObject_AddEncoding__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncRfbEncoding_t arg2 ;
  bool arg3 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (vncError_t)(*arg1)->AddEncoding(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServerObject_AddEncoding__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncRfbEncoding_t arg2 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  result = (vncError_t)(*arg1)->AddEncoding(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServerObject_RemoveEncoding(void * jarg1, int jarg2) {
  int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncRfbEncoding_t arg2 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  result = (vncError_t)(*arg1)->RemoveEncoding(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServerObject_ClearEncoding(void * jarg1, int jarg2) {
  int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncRfbEncoding_t arg2 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  result = (vncError_t)(*arg1)->ClearEncoding(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServerObject_SetPassword(void * jarg1, char * jarg2) {
  int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (vncError_t)(*arg1)->SetPassword((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServerObject_Start(void * jarg1) {
  int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  result = (vncError_t)(*arg1)->Start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServerObject_Stop(void * jarg1) {
  int jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  result = (vncError_t)(*arg1)->Stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServerObject_New__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  result = (*arg1)->New((char const *)arg2,arg3,arg4);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServerObject_New__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  result = (*arg1)->New((char const *)arg2,arg3);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServerObject_New__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->New((char const *)arg2);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServerObject_New__SWIG_3(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncServer * > *arg1 = (vncObjectWrapper< vncServer * > *) 0 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncObjectWrapper< vncServer * > *)jarg1; 
  result = (*arg1)->New();
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncEngineObject__SWIG_0(void * jarg1) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  vncObjectWrapper< vncEngine * > *result = 0 ;
  
  arg1 = (vncEngine *)jarg1; 
  result = (vncObjectWrapper< vncEngine * > *)new vncObjectWrapper< vncEngine * >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncEngineObject__SWIG_1() {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *result = 0 ;
  
  result = (vncObjectWrapper< vncEngine * > *)new vncObjectWrapper< vncEngine * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncEngineObject__SWIG_2(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = 0 ;
  vncObjectWrapper< vncEngine * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncEngine * > const & type is null", 0);
    return 0;
  } 
  result = (vncObjectWrapper< vncEngine * > *)new vncObjectWrapper< vncEngine * >((vncObjectWrapper< vncEngine * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncEngineObject(void * jarg1) {
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_opEquals__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncEngine *arg2 = (vncEngine *) (vncEngine *)0 ;
  vncObjectWrapper< vncEngine * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (vncEngine *)jarg2; 
  {
    vncObjectWrapper< vncEngine * > &_result_ref = (arg1)->operator =(arg2);
    result = (vncObjectWrapper< vncEngine * > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_opEquals__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncObjectWrapper< vncEngine * > *arg2 = 0 ;
  vncObjectWrapper< vncEngine * > *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (vncObjectWrapper< vncEngine * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncEngine * > const & type is null", 0);
    return 0;
  } 
  {
    vncObjectWrapper< vncEngine * > &_result_ref = (arg1)->operator =((vncObjectWrapper< vncEngine * > const &)*arg2);
    result = (vncObjectWrapper< vncEngine * > *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncEngineObject_opIsEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncObjectWrapper< vncEngine * > arg2 ;
  vncObjectWrapper< vncEngine * > const *argp2 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  argp2 = (vncObjectWrapper< vncEngine * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vncObjectWrapper< vncEngine * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((vncObjectWrapper< vncEngine * > const *)arg1)->operator ==(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncEngineObject_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncObjectWrapper< vncEngine * > *arg2 = 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (vncObjectWrapper< vncEngine * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vncObjectWrapper< vncEngine * > const & type is null", 0);
    return 0;
  } 
  result = (bool)((vncObjectWrapper< vncEngine * > const *)arg1)->operator !=((vncObjectWrapper< vncEngine * > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncEngineObject_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncObjectWrapper< vncEngine * > arg2 ;
  vncObjectWrapper< vncEngine * > const *argp2 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  argp2 = (vncObjectWrapper< vncEngine * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vncObjectWrapper< vncEngine * > const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((vncObjectWrapper< vncEngine * > const *)arg1)->operator <(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject___deref__(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncEngine *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (vncEngine *)((vncObjectWrapper< vncEngine * > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject___ref__(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncEngine *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (vncEngine *)((vncObjectWrapper< vncEngine * > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncEngineObject_opBool(void * jarg1) {
  unsigned int jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (bool)((vncObjectWrapper< vncEngine * > const *)arg1)->operator bool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_vncEngineObject_GetObjectId(void * jarg1) {
  char * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  char *result = 0 ;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (char *)(*arg1)->GetObjectId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncEngineObject_IsValid(void * jarg1) {
  unsigned int jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  bool result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (bool)(*arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncEngineObject_Initialize(void * jarg1) {
  int jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncError_t result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (vncError_t)(*arg1)->Initialize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_NewClient__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  result = (*arg1)->NewClient((char const *)arg2,arg3,arg4);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_NewClient__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  result = (*arg1)->NewClient((char const *)arg2,arg3);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_NewClient__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->NewClient((char const *)arg2);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_NewClient__SWIG_3(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (*arg1)->NewClient();
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_NewServer__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  result = (*arg1)->NewServer((char const *)arg2,arg3,arg4);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_NewServer__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  result = (*arg1)->NewServer((char const *)arg2,arg3);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_NewServer__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  char *arg2 = (char *) 0 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->NewServer((char const *)arg2);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_NewServer__SWIG_3(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (*arg1)->NewServer();
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngineObject_New(void * jarg1) {
  void * jresult ;
  vncObjectWrapper< vncEngine * > *arg1 = (vncObjectWrapper< vncEngine * > *) 0 ;
  vncObjectWrapper< vncEngine * > result;
  
  arg1 = (vncObjectWrapper< vncEngine * > *)jarg1; 
  result = (*arg1)->New();
  jresult = new vncObjectWrapper< vncEngine * >((const vncObjectWrapper< vncEngine * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_bits_per_pixel_set(void * jarg1, unsigned char jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bits_per_pixel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_vncRfbPixelFormat_t_bits_per_pixel_get(void * jarg1) {
  unsigned char jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint8_t) ((arg1)->bits_per_pixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_depth_set(void * jarg1, unsigned char jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_vncRfbPixelFormat_t_depth_get(void * jarg1) {
  unsigned char jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint8_t) ((arg1)->depth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_big_endian_flag_set(void * jarg1, unsigned char jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->big_endian_flag = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_vncRfbPixelFormat_t_big_endian_flag_get(void * jarg1) {
  unsigned char jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint8_t) ((arg1)->big_endian_flag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_true_colour_flag_set(void * jarg1, unsigned char jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->true_colour_flag = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_vncRfbPixelFormat_t_true_colour_flag_get(void * jarg1) {
  unsigned char jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint8_t) ((arg1)->true_colour_flag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_red_max_set(void * jarg1, unsigned short jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->red_max = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_vncRfbPixelFormat_t_red_max_get(void * jarg1) {
  unsigned short jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint16_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint16_t) ((arg1)->red_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_green_max_set(void * jarg1, unsigned short jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->green_max = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_vncRfbPixelFormat_t_green_max_get(void * jarg1) {
  unsigned short jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint16_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint16_t) ((arg1)->green_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_blue_max_set(void * jarg1, unsigned short jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->blue_max = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_vncRfbPixelFormat_t_blue_max_get(void * jarg1) {
  unsigned short jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint16_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint16_t) ((arg1)->blue_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_red_shift_set(void * jarg1, unsigned char jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->red_shift = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_vncRfbPixelFormat_t_red_shift_get(void * jarg1) {
  unsigned char jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint8_t) ((arg1)->red_shift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_green_shift_set(void * jarg1, unsigned char jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->green_shift = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_vncRfbPixelFormat_t_green_shift_get(void * jarg1) {
  unsigned char jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint8_t) ((arg1)->green_shift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbPixelFormat_t_blue_shift_set(void * jarg1, unsigned char jarg2) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->blue_shift = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_vncRfbPixelFormat_t_blue_shift_get(void * jarg1) {
  unsigned char jresult ;
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  uint8_t result;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  result = (uint8_t) ((arg1)->blue_shift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncRfbPixelFormat_t(void * jarg1) {
  vncRfbPixelFormat_t *arg1 = (vncRfbPixelFormat_t *) 0 ;
  
  arg1 = (vncRfbPixelFormat_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbRectangle_t_x_position_set(void * jarg1, unsigned short jarg2) {
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->x_position = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_vncRfbRectangle_t_x_position_get(void * jarg1) {
  unsigned short jresult ;
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  uint16_t result;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  result = (uint16_t) ((arg1)->x_position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbRectangle_t_y_position_set(void * jarg1, unsigned short jarg2) {
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->y_position = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_vncRfbRectangle_t_y_position_get(void * jarg1) {
  unsigned short jresult ;
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  uint16_t result;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  result = (uint16_t) ((arg1)->y_position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbRectangle_t_width_set(void * jarg1, unsigned short jarg2) {
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_vncRfbRectangle_t_width_get(void * jarg1) {
  unsigned short jresult ;
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  uint16_t result;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  result = (uint16_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbRectangle_t_height_set(void * jarg1, unsigned short jarg2) {
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_vncRfbRectangle_t_height_get(void * jarg1) {
  unsigned short jresult ;
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  uint16_t result;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  result = (uint16_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncRfbRectangle_t_encoding_type_set(void * jarg1, int jarg2) {
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  vncRfbEncoding_t arg2 ;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  if (arg1) (arg1)->encoding_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncRfbRectangle_t_encoding_type_get(void * jarg1) {
  int jresult ;
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  vncRfbEncoding_t result;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  result = (vncRfbEncoding_t) ((arg1)->encoding_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncRfbRectangle_t(void * jarg1) {
  vncRfbRectangle_t *arg1 = (vncRfbRectangle_t *) 0 ;
  
  arg1 = (vncRfbRectangle_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_RFB_RECTANGLE_HEADER_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 12;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_RFB_PIXELFORMAT_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 16;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_RFB_ZRLE_TILE_WIDTH_get() {
  int jresult ;
  int result;
  
  result = (int) 64;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OVNC_RFB_ZRLE_TILE_HEIGHT_get() {
  int jresult ;
  int result;
  
  result = (int) 64;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncRunnable(void * jarg1) {
  vncRunnable *arg1 = (vncRunnable *) 0 ;
  
  arg1 = (vncRunnable *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_vncRunnable_GetObjectId(void * jarg1) {
  char * jresult ;
  vncRunnable *arg1 = (vncRunnable *) 0 ;
  char *result = 0 ;
  
  arg1 = (vncRunnable *)jarg1; 
  result = (char *)(arg1)->GetObjectId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncClientEvent(int jarg1) {
  void * jresult ;
  vncClientEventType_t arg1 ;
  vncClientEvent *result = 0 ;
  
  arg1 = (vncClientEventType_t)jarg1; 
  result = (vncClientEvent *)new vncClientEvent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncClientEvent(void * jarg1) {
  vncClientEvent *arg1 = (vncClientEvent *) 0 ;
  
  arg1 = (vncClientEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_vncClientEvent_GetObjectId(void * jarg1) {
  char * jresult ;
  vncClientEvent *arg1 = (vncClientEvent *) 0 ;
  char *result = 0 ;
  
  arg1 = (vncClientEvent *)jarg1; 
  result = (char *)(arg1)->GetObjectId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientEvent_GetEventType(void * jarg1) {
  int jresult ;
  vncClientEvent *arg1 = (vncClientEvent *) 0 ;
  vncClientEventType_t result;
  
  arg1 = (vncClientEvent *)jarg1; 
  result = (vncClientEventType_t)(arg1)->GetEventType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vncClientCallback() {
  void * jresult ;
  vncClientCallback *result = 0 ;
  
  result = (vncClientCallback *)new SwigDirector_vncClientCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncClientCallback(void * jarg1) {
  vncClientCallback *arg1 = (vncClientCallback *) 0 ;
  
  arg1 = (vncClientCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClientCallback_OnEvent(void * jarg1, void * jarg2) {
  int jresult ;
  vncClientCallback *arg1 = (vncClientCallback *) 0 ;
  vncClientEvent *arg2 = (vncClientEvent *) 0 ;
  vncError_t result;
  
  arg1 = (vncClientCallback *)jarg1; 
  arg2 = (vncClientEvent *)jarg2; 
  result = (vncError_t)((vncClientCallback const *)arg1)->OnEvent((vncClientEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vncClientCallback_director_connect(void *objarg, SwigDirector_vncClientCallback::SWIG_Callback0_t callback0) {
  vncClientCallback *obj = (vncClientCallback *)objarg;
  SwigDirector_vncClientCallback *director = dynamic_cast<SwigDirector_vncClientCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncClient(void * jarg1) {
  vncClient *arg1 = (vncClient *) 0 ;
  
  arg1 = (vncClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_vncClient_GetObjectId(void * jarg1) {
  char * jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (vncClient *)jarg1; 
  result = (char *)(arg1)->GetObjectId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClient_IsValid(void * jarg1) {
  unsigned int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  bool result;
  
  arg1 = (vncClient *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_GetSate(void * jarg1) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncClientState_t result;
  
  arg1 = (vncClient *)jarg1; 
  result = (vncClientState_t)(arg1)->GetSate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_SetPassword(void * jarg1, char * jarg2) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  char *arg2 = (char *) 0 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (vncError_t)(arg1)->SetPassword((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_SetPixelSize(void * jarg1, int jarg2) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncRfbPixelSize_t arg2 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = (vncRfbPixelSize_t)jarg2; 
  result = (vncError_t)(arg1)->SetPixelSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_SetPixelFormat(void * jarg1, void * jarg2) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncRfbPixelFormat_t *arg2 = (vncRfbPixelFormat_t *) 0 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = (vncRfbPixelFormat_t *)jarg2; 
  result = (vncError_t)(arg1)->SetPixelFormat((vncRfbPixelFormat_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_Configure__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4, int jarg5) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncNetIPVersion_t arg5 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  arg5 = (vncNetIPVersion_t)jarg5; 
  result = (vncError_t)(arg1)->Configure((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_Configure__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  result = (vncError_t)(arg1)->Configure((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_Start(void * jarg1) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  result = (vncError_t)(arg1)->Start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_Connect(void * jarg1) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  result = (vncError_t)(arg1)->Connect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_Disconnect(void * jarg1) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  result = (vncError_t)(arg1)->Disconnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClient_IsConnected(void * jarg1) {
  unsigned int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  bool result;
  
  arg1 = (vncClient *)jarg1; 
  result = (bool)(arg1)->IsConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncClient_IsSessionEstablished(void * jarg1) {
  unsigned int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  bool result;
  
  arg1 = (vncClient *)jarg1; 
  result = (bool)(arg1)->IsSessionEstablished();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_SetParentWindow__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  void *arg2 = (void *) 0 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = jarg2; 
  result = (vncError_t)(arg1)->SetParentWindow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_SetParentWindow__SWIG_1(void * jarg1, long long jarg2) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  int64_t arg2 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (vncError_t)(arg1)->SetParentWindow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_SetCallback(void * jarg1, void * jarg2) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncClientCallback *arg2 = (vncClientCallback *) 0 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = (vncClientCallback *)jarg2; 
  result = (vncError_t)(arg1)->SetCallback((vncClientCallback const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_SendPointerEvent(void * jarg1, unsigned char jarg2, unsigned short jarg3, unsigned short jarg4) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  uint8_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  result = (vncError_t)(arg1)->SendPointerEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncClient_SendKeyEvent(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  bool arg2 ;
  uint32_t arg3 ;
  vncError_t result;
  
  arg1 = (vncClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (uint32_t)jarg3; 
  result = (vncError_t)(arg1)->SendKeyEvent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClient_New__SWIG_0(char * jarg1, unsigned short jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  vncNetPort_t arg2 ;
  vncNetworkType_t arg3 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (char *)jarg1; 
  arg2 = (vncNetPort_t)jarg2; 
  arg3 = (vncNetworkType_t)jarg3; 
  result = vncClient::New((char const *)arg1,arg2,arg3);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClient_New__SWIG_1(char * jarg1, unsigned short jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  vncNetPort_t arg2 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (char *)jarg1; 
  arg2 = (vncNetPort_t)jarg2; 
  result = vncClient::New((char const *)arg1,arg2);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClient_New__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (char *)jarg1; 
  result = vncClient::New((char const *)arg1);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClient_New__SWIG_3() {
  void * jresult ;
  vncObjectWrapper< vncClient * > result;
  
  result = vncClient::New();
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncClient_ABCD(void * jarg1) {
  void * jresult ;
  vncClient *arg1 = (vncClient *) 0 ;
  vncClient *result = 0 ;
  
  arg1 = (vncClient *)jarg1; 
  result = (vncClient *)(arg1)->ABCD();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncServer(void * jarg1) {
  vncServer *arg1 = (vncServer *) 0 ;
  
  arg1 = (vncServer *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_vncServer_GetObjectId(void * jarg1) {
  char * jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  char *result = 0 ;
  
  arg1 = (vncServer *)jarg1; 
  result = (char *)(arg1)->GetObjectId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncServer_IsValid(void * jarg1) {
  unsigned int jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  bool result;
  
  arg1 = (vncServer *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServer_AddEncoding__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  vncRfbEncoding_t arg2 ;
  bool arg3 ;
  vncError_t result;
  
  arg1 = (vncServer *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (vncError_t)(arg1)->AddEncoding(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServer_AddEncoding__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  vncRfbEncoding_t arg2 ;
  vncError_t result;
  
  arg1 = (vncServer *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  result = (vncError_t)(arg1)->AddEncoding(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServer_RemoveEncoding(void * jarg1, int jarg2) {
  int jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  vncRfbEncoding_t arg2 ;
  vncError_t result;
  
  arg1 = (vncServer *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  result = (vncError_t)(arg1)->RemoveEncoding(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServer_ClearEncoding(void * jarg1, int jarg2) {
  int jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  vncRfbEncoding_t arg2 ;
  vncError_t result;
  
  arg1 = (vncServer *)jarg1; 
  arg2 = (vncRfbEncoding_t)jarg2; 
  result = (vncError_t)(arg1)->ClearEncoding(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServer_SetPassword(void * jarg1, char * jarg2) {
  int jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  char *arg2 = (char *) 0 ;
  vncError_t result;
  
  arg1 = (vncServer *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (vncError_t)(arg1)->SetPassword((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServer_Start(void * jarg1) {
  int jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  vncError_t result;
  
  arg1 = (vncServer *)jarg1; 
  result = (vncError_t)(arg1)->Start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncServer_Stop(void * jarg1) {
  int jresult ;
  vncServer *arg1 = (vncServer *) 0 ;
  vncError_t result;
  
  arg1 = (vncServer *)jarg1; 
  result = (vncError_t)(arg1)->Stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServer_New__SWIG_0(char * jarg1, unsigned short jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  vncNetPort_t arg2 ;
  vncNetworkType_t arg3 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (char *)jarg1; 
  arg2 = (vncNetPort_t)jarg2; 
  arg3 = (vncNetworkType_t)jarg3; 
  result = vncServer::New((char const *)arg1,arg2,arg3);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServer_New__SWIG_1(char * jarg1, unsigned short jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  vncNetPort_t arg2 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (char *)jarg1; 
  arg2 = (vncNetPort_t)jarg2; 
  result = vncServer::New((char const *)arg1,arg2);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServer_New__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (char *)jarg1; 
  result = vncServer::New((char const *)arg1);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncServer_New__SWIG_3() {
  void * jresult ;
  vncObjectWrapper< vncServer * > result;
  
  result = vncServer::New();
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vncEngine(void * jarg1) {
  vncEngine *arg1 = (vncEngine *) 0 ;
  
  arg1 = (vncEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_vncEngine_GetObjectId(void * jarg1) {
  char * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (vncEngine *)jarg1; 
  result = (char *)(arg1)->GetObjectId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vncEngine_IsValid(void * jarg1) {
  unsigned int jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  bool result;
  
  arg1 = (vncEngine *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vncEngine_Initialize() {
  int jresult ;
  vncError_t result;
  
  result = (vncError_t)vncEngine::Initialize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_NewClient__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  result = (arg1)->NewClient((char const *)arg2,arg3,arg4);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_NewClient__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  result = (arg1)->NewClient((char const *)arg2,arg3);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_NewClient__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->NewClient((char const *)arg2);
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_NewClient__SWIG_3(void * jarg1) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  vncObjectWrapper< vncClient * > result;
  
  arg1 = (vncEngine *)jarg1; 
  result = (arg1)->NewClient();
  jresult = new vncObjectWrapper< vncClient * >((const vncObjectWrapper< vncClient * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_NewServer__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, int jarg4) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncNetworkType_t arg4 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  arg4 = (vncNetworkType_t)jarg4; 
  result = (arg1)->NewServer((char const *)arg2,arg3,arg4);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_NewServer__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  vncNetPort_t arg3 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (vncNetPort_t)jarg3; 
  result = (arg1)->NewServer((char const *)arg2,arg3);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_NewServer__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->NewServer((char const *)arg2);
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_NewServer__SWIG_3(void * jarg1) {
  void * jresult ;
  vncEngine *arg1 = (vncEngine *) 0 ;
  vncObjectWrapper< vncServer * > result;
  
  arg1 = (vncEngine *)jarg1; 
  result = (arg1)->NewServer();
  jresult = new vncObjectWrapper< vncServer * >((const vncObjectWrapper< vncServer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vncEngine_New() {
  void * jresult ;
  vncObjectWrapper< vncEngine * > result;
  
  result = vncEngine::New();
  jresult = new vncObjectWrapper< vncEngine * >((const vncObjectWrapper< vncEngine * > &)result); 
  return jresult;
}


SWIGEXPORT vncObject * SWIGSTDCALL CSharp_vncRunnableUpcast(vncRunnable *objectRef) {
    return (vncObject *)objectRef;
}

SWIGEXPORT vncObject * SWIGSTDCALL CSharp_vncClientEventUpcast(vncClientEvent *objectRef) {
    return (vncObject *)objectRef;
}

SWIGEXPORT vncRunnable * SWIGSTDCALL CSharp_vncClientUpcast(vncClient *objectRef) {
    return (vncRunnable *)objectRef;
}

SWIGEXPORT vncRunnable * SWIGSTDCALL CSharp_vncServerUpcast(vncServer *objectRef) {
    return (vncRunnable *)objectRef;
}

SWIGEXPORT vncObject * SWIGSTDCALL CSharp_vncEngineUpcast(vncEngine *objectRef) {
    return (vncObject *)objectRef;
}

#ifdef __cplusplus
}
#endif

