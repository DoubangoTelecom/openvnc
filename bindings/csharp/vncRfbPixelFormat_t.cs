/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.openvnc {

using System;
using System.Runtime.InteropServices;

public class vncRfbPixelFormat_t : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal vncRfbPixelFormat_t(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(vncRfbPixelFormat_t obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~vncRfbPixelFormat_t() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        OpenVNCWRAPPINVOKE.delete_vncRfbPixelFormat_t(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public byte bits_per_pixel {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_bits_per_pixel_set(swigCPtr, value);
    } 
    get {
      byte ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_bits_per_pixel_get(swigCPtr);
      return ret;
    } 
  }

  public byte depth {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_depth_set(swigCPtr, value);
    } 
    get {
      byte ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_depth_get(swigCPtr);
      return ret;
    } 
  }

  public byte big_endian_flag {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_big_endian_flag_set(swigCPtr, value);
    } 
    get {
      byte ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_big_endian_flag_get(swigCPtr);
      return ret;
    } 
  }

  public byte true_colour_flag {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_true_colour_flag_set(swigCPtr, value);
    } 
    get {
      byte ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_true_colour_flag_get(swigCPtr);
      return ret;
    } 
  }

  public ushort red_max {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_red_max_set(swigCPtr, value);
    } 
    get {
      ushort ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_red_max_get(swigCPtr);
      return ret;
    } 
  }

  public ushort green_max {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_green_max_set(swigCPtr, value);
    } 
    get {
      ushort ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_green_max_get(swigCPtr);
      return ret;
    } 
  }

  public ushort blue_max {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_blue_max_set(swigCPtr, value);
    } 
    get {
      ushort ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_blue_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte red_shift {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_red_shift_set(swigCPtr, value);
    } 
    get {
      byte ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_red_shift_get(swigCPtr);
      return ret;
    } 
  }

  public byte green_shift {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_green_shift_set(swigCPtr, value);
    } 
    get {
      byte ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_green_shift_get(swigCPtr);
      return ret;
    } 
  }

  public byte blue_shift {
    set {
      OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_blue_shift_set(swigCPtr, value);
    } 
    get {
      byte ret = OpenVNCWRAPPINVOKE.vncRfbPixelFormat_t_blue_shift_get(swigCPtr);
      return ret;
    } 
  }

}

}
