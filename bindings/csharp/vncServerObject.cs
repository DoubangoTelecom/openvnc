/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.openvnc {

using System;
using System.Runtime.InteropServices;

public class vncServerObject : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal vncServerObject(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(vncServerObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~vncServerObject() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        OpenVNCWRAPPINVOKE.delete_vncServerObject(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public vncServerObject(vncServer obj) : this(OpenVNCWRAPPINVOKE.new_vncServerObject__SWIG_0(vncServer.getCPtr(obj)), true) {
  }

  public vncServerObject() : this(OpenVNCWRAPPINVOKE.new_vncServerObject__SWIG_1(), true) {
  }

  public vncServerObject(vncServerObject obj) : this(OpenVNCWRAPPINVOKE.new_vncServerObject__SWIG_2(vncServerObject.getCPtr(obj)), true) {
    if (OpenVNCWRAPPINVOKE.SWIGPendingException.Pending) throw OpenVNCWRAPPINVOKE.SWIGPendingException.Retrieve();
  }

  public vncServerObject opEquals(vncServer other) {
    vncServerObject ret = new vncServerObject(OpenVNCWRAPPINVOKE.vncServerObject_opEquals__SWIG_0(swigCPtr, vncServer.getCPtr(other)), false);
    return ret;
  }

  public vncServerObject opEquals(vncServerObject other) {
    vncServerObject ret = new vncServerObject(OpenVNCWRAPPINVOKE.vncServerObject_opEquals__SWIG_1(swigCPtr, vncServerObject.getCPtr(other)), false);
    if (OpenVNCWRAPPINVOKE.SWIGPendingException.Pending) throw OpenVNCWRAPPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opIsEquals(vncServerObject other) {
    bool ret = OpenVNCWRAPPINVOKE.vncServerObject_opIsEquals(swigCPtr, vncServerObject.getCPtr(other));
    if (OpenVNCWRAPPINVOKE.SWIGPendingException.Pending) throw OpenVNCWRAPPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opNotEquals(vncServerObject other) {
    bool ret = OpenVNCWRAPPINVOKE.vncServerObject_opNotEquals(swigCPtr, vncServerObject.getCPtr(other));
    if (OpenVNCWRAPPINVOKE.SWIGPendingException.Pending) throw OpenVNCWRAPPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opLessThan(vncServerObject other) {
    bool ret = OpenVNCWRAPPINVOKE.vncServerObject_opLessThan(swigCPtr, vncServerObject.getCPtr(other));
    if (OpenVNCWRAPPINVOKE.SWIGPendingException.Pending) throw OpenVNCWRAPPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vncServer __deref__() {
    IntPtr cPtr = OpenVNCWRAPPINVOKE.vncServerObject___deref__(swigCPtr);
    vncServer ret = (cPtr == IntPtr.Zero) ? null : new vncServer(cPtr, false);
    return ret;
  }

  public vncServer __ref__() {
    IntPtr cPtr = OpenVNCWRAPPINVOKE.vncServerObject___ref__(swigCPtr);
    vncServer ret = (cPtr == IntPtr.Zero) ? null : new vncServer(cPtr, false);
    return ret;
  }

  public bool opBool() {
    bool ret = OpenVNCWRAPPINVOKE.vncServerObject_opBool(swigCPtr);
    return ret;
  }

  public string GetObjectId() {
    string ret = OpenVNCWRAPPINVOKE.vncServerObject_GetObjectId(swigCPtr);
    return ret;
  }

  public bool IsValid() {
    bool ret = OpenVNCWRAPPINVOKE.vncServerObject_IsValid(swigCPtr);
    return ret;
  }

  public vncError_t AddEncoding(vncRfbEncoding_t eEncoding, bool bBack) {
    vncError_t ret = (vncError_t)OpenVNCWRAPPINVOKE.vncServerObject_AddEncoding__SWIG_0(swigCPtr, (int)eEncoding, bBack);
    return ret;
  }

  public vncError_t AddEncoding(vncRfbEncoding_t eEncoding) {
    vncError_t ret = (vncError_t)OpenVNCWRAPPINVOKE.vncServerObject_AddEncoding__SWIG_1(swigCPtr, (int)eEncoding);
    return ret;
  }

  public vncError_t RemoveEncoding(vncRfbEncoding_t eEncoding) {
    vncError_t ret = (vncError_t)OpenVNCWRAPPINVOKE.vncServerObject_RemoveEncoding(swigCPtr, (int)eEncoding);
    return ret;
  }

  public vncError_t ClearEncoding(vncRfbEncoding_t eEncoding) {
    vncError_t ret = (vncError_t)OpenVNCWRAPPINVOKE.vncServerObject_ClearEncoding(swigCPtr, (int)eEncoding);
    return ret;
  }

  public vncError_t SetPassword(string pPassword) {
    vncError_t ret = (vncError_t)OpenVNCWRAPPINVOKE.vncServerObject_SetPassword(swigCPtr, pPassword);
    return ret;
  }

  public vncError_t Start() {
    vncError_t ret = (vncError_t)OpenVNCWRAPPINVOKE.vncServerObject_Start(swigCPtr);
    return ret;
  }

  public vncError_t Stop() {
    vncError_t ret = (vncError_t)OpenVNCWRAPPINVOKE.vncServerObject_Stop(swigCPtr);
    return ret;
  }

  public vncServerObject New(string pLocalHost, ushort nLocalPort, vncNetworkType_t eType) {
    vncServerObject ret = new vncServerObject(OpenVNCWRAPPINVOKE.vncServerObject_New__SWIG_0(swigCPtr, pLocalHost, nLocalPort, (int)eType), true);
    return ret;
  }

  public vncServerObject New(string pLocalHost, ushort nLocalPort) {
    vncServerObject ret = new vncServerObject(OpenVNCWRAPPINVOKE.vncServerObject_New__SWIG_1(swigCPtr, pLocalHost, nLocalPort), true);
    return ret;
  }

  public vncServerObject New(string pLocalHost) {
    vncServerObject ret = new vncServerObject(OpenVNCWRAPPINVOKE.vncServerObject_New__SWIG_2(swigCPtr, pLocalHost), true);
    return ret;
  }

  public vncServerObject New() {
    vncServerObject ret = new vncServerObject(OpenVNCWRAPPINVOKE.vncServerObject_New__SWIG_3(swigCPtr), true);
    return ret;
  }

}

}
