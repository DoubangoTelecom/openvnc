/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.openvnc {

using System;
using System.Runtime.InteropServices;

class OpenVNCWRAPPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("OpenVNCWRAP", EntryPoint="SWIGRegisterExceptionCallbacks_OpenVNCWRAP")]
    public static extern void SWIGRegisterExceptionCallbacks_OpenVNCWRAP(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("OpenVNCWRAP", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_OpenVNCWRAP")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_OpenVNCWRAP(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_OpenVNCWRAP(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_OpenVNCWRAP(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(OpenVNCWRAPPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(OpenVNCWRAPPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("OpenVNCWRAP", EntryPoint="SWIGRegisterStringCallback_OpenVNCWRAP")]
    public static extern void SWIGRegisterStringCallback_OpenVNCWRAP(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_OpenVNCWRAP(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_DebugCallback")]
  public static extern IntPtr new_DebugCallback();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_DebugCallback")]
  public static extern void delete_DebugCallback(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_OnDebugInfo")]
  public static extern int DebugCallback_OnDebugInfo(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_OnDebugInfoSwigExplicitDebugCallback")]
  public static extern int DebugCallback_OnDebugInfoSwigExplicitDebugCallback(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_OnDebugWarn")]
  public static extern int DebugCallback_OnDebugWarn(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_OnDebugWarnSwigExplicitDebugCallback")]
  public static extern int DebugCallback_OnDebugWarnSwigExplicitDebugCallback(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_OnDebugError")]
  public static extern int DebugCallback_OnDebugError(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_OnDebugErrorSwigExplicitDebugCallback")]
  public static extern int DebugCallback_OnDebugErrorSwigExplicitDebugCallback(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_OnDebugFatal")]
  public static extern int DebugCallback_OnDebugFatal(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_OnDebugFatalSwigExplicitDebugCallback")]
  public static extern int DebugCallback_OnDebugFatalSwigExplicitDebugCallback(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_DebugCallback_director_connect")]
  public static extern void DebugCallback_director_connect(HandleRef jarg1, DebugCallback.SwigDelegateDebugCallback_0 delegate0, DebugCallback.SwigDelegateDebugCallback_1 delegate1, DebugCallback.SwigDelegateDebugCallback_2 delegate2, DebugCallback.SwigDelegateDebugCallback_3 delegate3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_NULL_get")]
  public static extern int NULL_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_HAVE_POLL_get")]
  public static extern int OVNC_HAVE_POLL_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_USE_POLL_get")]
  public static extern int OVNC_USE_POLL_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_HAVE_IFADDRS_get")]
  public static extern int OVNC_HAVE_IFADDRS_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_HAVE_DNS_H_get")]
  public static extern int OVNC_HAVE_DNS_H_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_HAVE_SS_LEN_get")]
  public static extern int OVNC_HAVE_SS_LEN_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_HAVE_SA_LEN_get")]
  public static extern int OVNC_HAVE_SA_LEN_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_HAVE_GETTIMEOFDAY_get")]
  public static extern int OVNC_HAVE_GETTIMEOFDAY_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_CONFIG_SERVER_PORT_get")]
  public static extern int OVNC_CONFIG_SERVER_PORT_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_CONFIG_CLIENT_PORT_get")]
  public static extern int OVNC_CONFIG_CLIENT_PORT_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_CONFIG_VERSION_MAJOR_get")]
  public static extern int OVNC_CONFIG_VERSION_MAJOR_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_CONFIG_VERSION_MINOR_get")]
  public static extern int OVNC_CONFIG_VERSION_MINOR_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_CONFIG_VERSION_MAJOR_MIN_get")]
  public static extern int OVNC_CONFIG_VERSION_MAJOR_MIN_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_CONFIG_VERSION_MINOR_MIN_get")]
  public static extern int OVNC_CONFIG_VERSION_MINOR_MIN_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_CONFIG_VERSION_MAJOR_MAX_get")]
  public static extern int OVNC_CONFIG_VERSION_MAJOR_MAX_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_CONFIG_VERSION_MINOR_MAX_get")]
  public static extern int OVNC_CONFIG_VERSION_MINOR_MAX_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_NET_INVALID_SOCKET_get")]
  public static extern int OVNC_NET_INVALID_SOCKET_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_NET_INVALID_FD_get")]
  public static extern int OVNC_NET_INVALID_FD_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_NET_SOCKET_HOST_ANY_get")]
  public static extern int OVNC_NET_SOCKET_HOST_ANY_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_NET_SOCKET_PORT_ANY_get")]
  public static extern int OVNC_NET_SOCKET_PORT_ANY_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_NET_CONNECT_TIMEOUT_get")]
  public static extern int OVNC_NET_CONNECT_TIMEOUT_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_NET_MAX_FDS_get")]
  public static extern int OVNC_NET_MAX_FDS_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_NET_RCVBUF_SIZE_get")]
  public static extern int OVNC_NET_RCVBUF_SIZE_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_NET_SNDBUF_SIZE_get")]
  public static extern int OVNC_NET_SNDBUF_SIZE_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncObject")]
  public static extern void delete_vncObject(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncClientObject__SWIG_0")]
  public static extern IntPtr new_vncClientObject__SWIG_0(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncClientObject__SWIG_1")]
  public static extern IntPtr new_vncClientObject__SWIG_1();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncClientObject__SWIG_2")]
  public static extern IntPtr new_vncClientObject__SWIG_2(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncClientObject")]
  public static extern void delete_vncClientObject(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_opEquals__SWIG_0")]
  public static extern IntPtr vncClientObject_opEquals__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_opEquals__SWIG_1")]
  public static extern IntPtr vncClientObject_opEquals__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_opIsEquals")]
  public static extern bool vncClientObject_opIsEquals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_opNotEquals")]
  public static extern bool vncClientObject_opNotEquals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_opLessThan")]
  public static extern bool vncClientObject_opLessThan(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject___deref__")]
  public static extern IntPtr vncClientObject___deref__(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject___ref__")]
  public static extern IntPtr vncClientObject___ref__(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_opBool")]
  public static extern bool vncClientObject_opBool(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_GetObjectId")]
  public static extern string vncClientObject_GetObjectId(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_IsValid")]
  public static extern bool vncClientObject_IsValid(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_GetSate")]
  public static extern int vncClientObject_GetSate(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_SetPassword")]
  public static extern int vncClientObject_SetPassword(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_SetPixelSize")]
  public static extern int vncClientObject_SetPixelSize(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_SetPixelFormat")]
  public static extern int vncClientObject_SetPixelFormat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_Configure__SWIG_0")]
  public static extern int vncClientObject_Configure__SWIG_0(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4, int jarg5);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_Configure__SWIG_1")]
  public static extern int vncClientObject_Configure__SWIG_1(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_Start")]
  public static extern int vncClientObject_Start(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_Connect")]
  public static extern int vncClientObject_Connect(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_Disconnect")]
  public static extern int vncClientObject_Disconnect(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_IsConnected")]
  public static extern bool vncClientObject_IsConnected(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_IsSessionEstablished")]
  public static extern bool vncClientObject_IsSessionEstablished(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_SetParentWindow__SWIG_0")]
  public static extern int vncClientObject_SetParentWindow__SWIG_0(HandleRef jarg1, byte[] jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_SetParentWindow__SWIG_1")]
  public static extern int vncClientObject_SetParentWindow__SWIG_1(HandleRef jarg1, long jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_SetCallback")]
  public static extern int vncClientObject_SetCallback(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_SendPointerEvent")]
  public static extern int vncClientObject_SendPointerEvent(HandleRef jarg1, byte jarg2, ushort jarg3, ushort jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_SendKeyEvent")]
  public static extern int vncClientObject_SendKeyEvent(HandleRef jarg1, bool jarg2, uint jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_New__SWIG_0")]
  public static extern IntPtr vncClientObject_New__SWIG_0(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_New__SWIG_1")]
  public static extern IntPtr vncClientObject_New__SWIG_1(HandleRef jarg1, string jarg2, ushort jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_New__SWIG_2")]
  public static extern IntPtr vncClientObject_New__SWIG_2(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_New__SWIG_3")]
  public static extern IntPtr vncClientObject_New__SWIG_3(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientObject_ABCD")]
  public static extern IntPtr vncClientObject_ABCD(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncServerObject__SWIG_0")]
  public static extern IntPtr new_vncServerObject__SWIG_0(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncServerObject__SWIG_1")]
  public static extern IntPtr new_vncServerObject__SWIG_1();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncServerObject__SWIG_2")]
  public static extern IntPtr new_vncServerObject__SWIG_2(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncServerObject")]
  public static extern void delete_vncServerObject(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_opEquals__SWIG_0")]
  public static extern IntPtr vncServerObject_opEquals__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_opEquals__SWIG_1")]
  public static extern IntPtr vncServerObject_opEquals__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_opIsEquals")]
  public static extern bool vncServerObject_opIsEquals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_opNotEquals")]
  public static extern bool vncServerObject_opNotEquals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_opLessThan")]
  public static extern bool vncServerObject_opLessThan(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject___deref__")]
  public static extern IntPtr vncServerObject___deref__(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject___ref__")]
  public static extern IntPtr vncServerObject___ref__(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_opBool")]
  public static extern bool vncServerObject_opBool(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_GetObjectId")]
  public static extern string vncServerObject_GetObjectId(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_IsValid")]
  public static extern bool vncServerObject_IsValid(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_AddEncoding__SWIG_0")]
  public static extern int vncServerObject_AddEncoding__SWIG_0(HandleRef jarg1, int jarg2, bool jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_AddEncoding__SWIG_1")]
  public static extern int vncServerObject_AddEncoding__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_RemoveEncoding")]
  public static extern int vncServerObject_RemoveEncoding(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_ClearEncoding")]
  public static extern int vncServerObject_ClearEncoding(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_SetPassword")]
  public static extern int vncServerObject_SetPassword(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_Start")]
  public static extern int vncServerObject_Start(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_Stop")]
  public static extern int vncServerObject_Stop(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_New__SWIG_0")]
  public static extern IntPtr vncServerObject_New__SWIG_0(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_New__SWIG_1")]
  public static extern IntPtr vncServerObject_New__SWIG_1(HandleRef jarg1, string jarg2, ushort jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_New__SWIG_2")]
  public static extern IntPtr vncServerObject_New__SWIG_2(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerObject_New__SWIG_3")]
  public static extern IntPtr vncServerObject_New__SWIG_3(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncEngineObject__SWIG_0")]
  public static extern IntPtr new_vncEngineObject__SWIG_0(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncEngineObject__SWIG_1")]
  public static extern IntPtr new_vncEngineObject__SWIG_1();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncEngineObject__SWIG_2")]
  public static extern IntPtr new_vncEngineObject__SWIG_2(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncEngineObject")]
  public static extern void delete_vncEngineObject(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_opEquals__SWIG_0")]
  public static extern IntPtr vncEngineObject_opEquals__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_opEquals__SWIG_1")]
  public static extern IntPtr vncEngineObject_opEquals__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_opIsEquals")]
  public static extern bool vncEngineObject_opIsEquals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_opNotEquals")]
  public static extern bool vncEngineObject_opNotEquals(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_opLessThan")]
  public static extern bool vncEngineObject_opLessThan(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject___deref__")]
  public static extern IntPtr vncEngineObject___deref__(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject___ref__")]
  public static extern IntPtr vncEngineObject___ref__(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_opBool")]
  public static extern bool vncEngineObject_opBool(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_GetObjectId")]
  public static extern string vncEngineObject_GetObjectId(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_IsValid")]
  public static extern bool vncEngineObject_IsValid(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_Initialize")]
  public static extern int vncEngineObject_Initialize(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_NewClient__SWIG_0")]
  public static extern IntPtr vncEngineObject_NewClient__SWIG_0(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_NewClient__SWIG_1")]
  public static extern IntPtr vncEngineObject_NewClient__SWIG_1(HandleRef jarg1, string jarg2, ushort jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_NewClient__SWIG_2")]
  public static extern IntPtr vncEngineObject_NewClient__SWIG_2(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_NewClient__SWIG_3")]
  public static extern IntPtr vncEngineObject_NewClient__SWIG_3(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_NewServer__SWIG_0")]
  public static extern IntPtr vncEngineObject_NewServer__SWIG_0(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_NewServer__SWIG_1")]
  public static extern IntPtr vncEngineObject_NewServer__SWIG_1(HandleRef jarg1, string jarg2, ushort jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_NewServer__SWIG_2")]
  public static extern IntPtr vncEngineObject_NewServer__SWIG_2(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_NewServer__SWIG_3")]
  public static extern IntPtr vncEngineObject_NewServer__SWIG_3(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineObject_New")]
  public static extern IntPtr vncEngineObject_New(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_bits_per_pixel_set")]
  public static extern void vncRfbPixelFormat_t_bits_per_pixel_set(HandleRef jarg1, byte jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_bits_per_pixel_get")]
  public static extern byte vncRfbPixelFormat_t_bits_per_pixel_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_depth_set")]
  public static extern void vncRfbPixelFormat_t_depth_set(HandleRef jarg1, byte jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_depth_get")]
  public static extern byte vncRfbPixelFormat_t_depth_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_big_endian_flag_set")]
  public static extern void vncRfbPixelFormat_t_big_endian_flag_set(HandleRef jarg1, byte jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_big_endian_flag_get")]
  public static extern byte vncRfbPixelFormat_t_big_endian_flag_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_true_colour_flag_set")]
  public static extern void vncRfbPixelFormat_t_true_colour_flag_set(HandleRef jarg1, byte jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_true_colour_flag_get")]
  public static extern byte vncRfbPixelFormat_t_true_colour_flag_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_red_max_set")]
  public static extern void vncRfbPixelFormat_t_red_max_set(HandleRef jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_red_max_get")]
  public static extern ushort vncRfbPixelFormat_t_red_max_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_green_max_set")]
  public static extern void vncRfbPixelFormat_t_green_max_set(HandleRef jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_green_max_get")]
  public static extern ushort vncRfbPixelFormat_t_green_max_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_blue_max_set")]
  public static extern void vncRfbPixelFormat_t_blue_max_set(HandleRef jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_blue_max_get")]
  public static extern ushort vncRfbPixelFormat_t_blue_max_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_red_shift_set")]
  public static extern void vncRfbPixelFormat_t_red_shift_set(HandleRef jarg1, byte jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_red_shift_get")]
  public static extern byte vncRfbPixelFormat_t_red_shift_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_green_shift_set")]
  public static extern void vncRfbPixelFormat_t_green_shift_set(HandleRef jarg1, byte jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_green_shift_get")]
  public static extern byte vncRfbPixelFormat_t_green_shift_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_blue_shift_set")]
  public static extern void vncRfbPixelFormat_t_blue_shift_set(HandleRef jarg1, byte jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbPixelFormat_t_blue_shift_get")]
  public static extern byte vncRfbPixelFormat_t_blue_shift_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncRfbPixelFormat_t")]
  public static extern void delete_vncRfbPixelFormat_t(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_x_position_set")]
  public static extern void vncRfbRectangle_t_x_position_set(HandleRef jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_x_position_get")]
  public static extern ushort vncRfbRectangle_t_x_position_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_y_position_set")]
  public static extern void vncRfbRectangle_t_y_position_set(HandleRef jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_y_position_get")]
  public static extern ushort vncRfbRectangle_t_y_position_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_width_set")]
  public static extern void vncRfbRectangle_t_width_set(HandleRef jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_width_get")]
  public static extern ushort vncRfbRectangle_t_width_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_height_set")]
  public static extern void vncRfbRectangle_t_height_set(HandleRef jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_height_get")]
  public static extern ushort vncRfbRectangle_t_height_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_encoding_type_set")]
  public static extern void vncRfbRectangle_t_encoding_type_set(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRfbRectangle_t_encoding_type_get")]
  public static extern int vncRfbRectangle_t_encoding_type_get(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncRfbRectangle_t")]
  public static extern void delete_vncRfbRectangle_t(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_RFB_RECTANGLE_HEADER_SIZE_get")]
  public static extern int OVNC_RFB_RECTANGLE_HEADER_SIZE_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_RFB_PIXELFORMAT_SIZE_get")]
  public static extern int OVNC_RFB_PIXELFORMAT_SIZE_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_RFB_ZRLE_TILE_WIDTH_get")]
  public static extern int OVNC_RFB_ZRLE_TILE_WIDTH_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_OVNC_RFB_ZRLE_TILE_HEIGHT_get")]
  public static extern int OVNC_RFB_ZRLE_TILE_HEIGHT_get();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncRunnable")]
  public static extern void delete_vncRunnable(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRunnable_GetObjectId")]
  public static extern string vncRunnable_GetObjectId(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncClientEvent")]
  public static extern IntPtr new_vncClientEvent(int jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncClientEvent")]
  public static extern void delete_vncClientEvent(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientEvent_GetObjectId")]
  public static extern string vncClientEvent_GetObjectId(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientEvent_GetEventType")]
  public static extern int vncClientEvent_GetEventType(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_new_vncClientCallback")]
  public static extern IntPtr new_vncClientCallback();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncClientCallback")]
  public static extern void delete_vncClientCallback(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientCallback_OnEvent")]
  public static extern int vncClientCallback_OnEvent(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientCallback_director_connect")]
  public static extern void vncClientCallback_director_connect(HandleRef jarg1, vncClientCallback.SwigDelegatevncClientCallback_0 delegate0);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncClient")]
  public static extern void delete_vncClient(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_GetObjectId")]
  public static extern string vncClient_GetObjectId(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_IsValid")]
  public static extern bool vncClient_IsValid(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_GetSate")]
  public static extern int vncClient_GetSate(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_SetPassword")]
  public static extern int vncClient_SetPassword(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_SetPixelSize")]
  public static extern int vncClient_SetPixelSize(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_SetPixelFormat")]
  public static extern int vncClient_SetPixelFormat(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_Configure__SWIG_0")]
  public static extern int vncClient_Configure__SWIG_0(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4, int jarg5);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_Configure__SWIG_1")]
  public static extern int vncClient_Configure__SWIG_1(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_Start")]
  public static extern int vncClient_Start(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_Connect")]
  public static extern int vncClient_Connect(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_Disconnect")]
  public static extern int vncClient_Disconnect(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_IsConnected")]
  public static extern bool vncClient_IsConnected(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_IsSessionEstablished")]
  public static extern bool vncClient_IsSessionEstablished(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_SetParentWindow__SWIG_0")]
  public static extern int vncClient_SetParentWindow__SWIG_0(HandleRef jarg1, byte[] jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_SetParentWindow__SWIG_1")]
  public static extern int vncClient_SetParentWindow__SWIG_1(HandleRef jarg1, long jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_SetCallback")]
  public static extern int vncClient_SetCallback(HandleRef jarg1, HandleRef jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_SendPointerEvent")]
  public static extern int vncClient_SendPointerEvent(HandleRef jarg1, byte jarg2, ushort jarg3, ushort jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_SendKeyEvent")]
  public static extern int vncClient_SendKeyEvent(HandleRef jarg1, bool jarg2, uint jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_New__SWIG_0")]
  public static extern IntPtr vncClient_New__SWIG_0(string jarg1, ushort jarg2, int jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_New__SWIG_1")]
  public static extern IntPtr vncClient_New__SWIG_1(string jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_New__SWIG_2")]
  public static extern IntPtr vncClient_New__SWIG_2(string jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_New__SWIG_3")]
  public static extern IntPtr vncClient_New__SWIG_3();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClient_ABCD")]
  public static extern IntPtr vncClient_ABCD(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncServer")]
  public static extern void delete_vncServer(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_GetObjectId")]
  public static extern string vncServer_GetObjectId(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_IsValid")]
  public static extern bool vncServer_IsValid(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_AddEncoding__SWIG_0")]
  public static extern int vncServer_AddEncoding__SWIG_0(HandleRef jarg1, int jarg2, bool jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_AddEncoding__SWIG_1")]
  public static extern int vncServer_AddEncoding__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_RemoveEncoding")]
  public static extern int vncServer_RemoveEncoding(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_ClearEncoding")]
  public static extern int vncServer_ClearEncoding(HandleRef jarg1, int jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_SetPassword")]
  public static extern int vncServer_SetPassword(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_Start")]
  public static extern int vncServer_Start(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_Stop")]
  public static extern int vncServer_Stop(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_New__SWIG_0")]
  public static extern IntPtr vncServer_New__SWIG_0(string jarg1, ushort jarg2, int jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_New__SWIG_1")]
  public static extern IntPtr vncServer_New__SWIG_1(string jarg1, ushort jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_New__SWIG_2")]
  public static extern IntPtr vncServer_New__SWIG_2(string jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServer_New__SWIG_3")]
  public static extern IntPtr vncServer_New__SWIG_3();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_delete_vncEngine")]
  public static extern void delete_vncEngine(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_GetObjectId")]
  public static extern string vncEngine_GetObjectId(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_IsValid")]
  public static extern bool vncEngine_IsValid(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_Initialize")]
  public static extern int vncEngine_Initialize();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_NewClient__SWIG_0")]
  public static extern IntPtr vncEngine_NewClient__SWIG_0(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_NewClient__SWIG_1")]
  public static extern IntPtr vncEngine_NewClient__SWIG_1(HandleRef jarg1, string jarg2, ushort jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_NewClient__SWIG_2")]
  public static extern IntPtr vncEngine_NewClient__SWIG_2(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_NewClient__SWIG_3")]
  public static extern IntPtr vncEngine_NewClient__SWIG_3(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_NewServer__SWIG_0")]
  public static extern IntPtr vncEngine_NewServer__SWIG_0(HandleRef jarg1, string jarg2, ushort jarg3, int jarg4);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_NewServer__SWIG_1")]
  public static extern IntPtr vncEngine_NewServer__SWIG_1(HandleRef jarg1, string jarg2, ushort jarg3);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_NewServer__SWIG_2")]
  public static extern IntPtr vncEngine_NewServer__SWIG_2(HandleRef jarg1, string jarg2);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_NewServer__SWIG_3")]
  public static extern IntPtr vncEngine_NewServer__SWIG_3(HandleRef jarg1);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngine_New")]
  public static extern IntPtr vncEngine_New();

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncRunnableUpcast")]
  public static extern IntPtr vncRunnableUpcast(IntPtr objectRef);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientEventUpcast")]
  public static extern IntPtr vncClientEventUpcast(IntPtr objectRef);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncClientUpcast")]
  public static extern IntPtr vncClientUpcast(IntPtr objectRef);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncServerUpcast")]
  public static extern IntPtr vncServerUpcast(IntPtr objectRef);

  [DllImport("OpenVNCWRAP", EntryPoint="CSharp_vncEngineUpcast")]
  public static extern IntPtr vncEngineUpcast(IntPtr objectRef);
}

}
